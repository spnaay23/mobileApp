import 'package:flutter/material.dart';
import 'package:email_validator/email_validator.dart';
import 'dart:core';
import 'package:csv/csv.dart';
import 'package:flutter/services.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        theme: ThemeData(
          primarySwatch: Colors.blue,
        ),
        home: Scaffold(
          appBar: AppBar(
            title: Text("Address Form"),
          ),
          body: MyCustomForm(),
        ));
  }
}

class MyCustomForm extends StatefulWidget {
  const MyCustomForm({super.key});

  @override
  State<MyCustomForm> createState() => _MyCustomFormState();
}

class _MyCustomFormState extends State<MyCustomForm> {
  final _key = GlobalKey<FormState>();
  final myController_email = TextEditingController();
  final myController_zip = TextEditingController();
  final myController_district = TextEditingController();
  final myController_tambon = TextEditingController();
  late String email;
  late bool isValid = true;
  List<List<dynamic>> disCSV = [];

  @override
  void initState() {
    super.initState();
    getCSV();
  }

  void getCSV() async {
    final myData = await rootBundle.loadString("assets/tambon_chiangmai.csv");
    List<List<dynamic>> rowsAsListOfValues =
        const CsvToListConverter().convert(myData);
    setState(() {
      disCSV = rowsAsListOfValues;
    });
    disCSV.removeAt(0);
  }

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _key,
      child: Column(
        children: [
          TextFormField(
            decoration: const InputDecoration(hintText: "Enter Email Address"),
            validator: (email) {
              if (email == null || email.isEmpty) {
                return 'Please write your email';
              } else if (isValid != EmailValidator.validate(email)) {
                return "Invalid Email Format";
              }
              return null;
            },
            controller: myController_email,
          ),
          TextFormField(
            decoration: const InputDecoration(hintText: "Enter Zip Code"),
            validator: (zip) {
              if (zip == null || zip.isEmpty) {
                return 'Please write your zip code';
              } else if (zip.length != 5 || zip.startsWith('0')) {
                return "Invalid Zip Code Format";
              }
              return null;
            },
            controller: myController_zip,
          ),
          Row(
            children: [
              Text("Provice : ", style: TextStyle(fontSize: 20)),
              Text(
                "Chiang Mai",
                style: TextStyle(fontSize: 18),
              )
            ],
          ),
          Row(
            children: [
              Text("District ", style: TextStyle(fontSize: 20)),
            ],
          ),
          Autocomplete<String>(
            optionsBuilder: (TextEditingValue textEditingValue) {
              if (textEditingValue.text == '') {
                return const Iterable<String>.empty();
              }
              List<String> list_district = [];
              for (int i = 0; i < disCSV.length; i++) {
                if (!list_district.contains(disCSV[i][1])) {
                  list_district.add(disCSV[i][1]);
                }
              }
              return list_district.where((String option) {
                return option
                    .toLowerCase()
                    .contains(textEditingValue.text.toLowerCase());
              });
            },
            onSelected: (String selection) {
              myController_district.text = selection;
            },
          ),
          Row(
            children: [
              Text("Tambon ", style: TextStyle(fontSize: 20)),
            ],
          ),
          Autocomplete<String>(
            optionsBuilder: (TextEditingValue textEditingValue) {
              if (textEditingValue.text == '') {
                return const Iterable<String>.empty();
              }
              List<String> list_Tambon = [];
              for (int i = 0; i < disCSV.length; i++) {
                // if (list_Tambon.contains(disCSV[i][1])) {
                //   list_district.add(disCSV[i][1]);
                // }
                if (disCSV[i][1] == myController_district.text) {
                  list_Tambon.add(disCSV[i][0]);
                }
              }
              return list_Tambon.where((String option) {
                return option
                    .toLowerCase()
                    .contains(textEditingValue.text.toLowerCase());
              });
            },
            onSelected: (String selection) {
              myController_tambon.text = selection;
            },
          ),
          ElevatedButton(
              onPressed: () {
                if (_key.currentState!.validate()) {
                  _key.currentState!.save();
                  //check validate
                  ScaffoldMessenger.of(context).showSnackBar(
                      (SnackBar(content: Text('Processing Data'))));
                  //after submit it will show processing text
                }
                getCSV();
              },
              child: Text("Submit"))
        ],
      ),
    );
  }
}
